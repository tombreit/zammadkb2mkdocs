#!/usr/bin/env python3

"""
This module fixes the image links in the Markdown file generated by convert2mkdocs.py. It needs to figure out the correct image API URLs from the Zammad database, and replace the image links in the Markdown file with the correct URLs and save the remote images locally.

Example snippet from the JSON file:

```json
  {
    "answer_id": 31,
    "answer_title": "Some title",
    "answer_content": "<ol>\n<li>...</li>\n</ol><p><img src=\"cid:KnowledgeBase::Answer::Translation::Content_body.94d513bb-abee-4c8a-8132-0f2923118a95@<your-zammad-baseurl>\" style=\"max-width:100%;max-width:100%;width: 483.334px;max-width: 100%;max-height: 291.617px;max-height: 229.3px;\"> <br></p>",
    "locale": 1,
    "category_titel": "Email",
    "parent_id": 18,
    "category_id": 19
  },
```

- Resolve images

But in our export we have:
<img src=\"cid:KnowledgeBase::Answer::Translation::Content_body.d14dd6a3-2d6a-4322-aa23-cbb73463e1b4@<your-zammad-baseurl>\"

-> table `stores`:
```json
    {
        "created_at": "2023-01-13 10:08:24.050000",
        "created_by_id": 10,
        "filename": "image1.png",
        "id": 26880,
        "o_id": "177",
        "preferences": "---\nContent-Type: image/png\nMime-Type: image/png\nContent-ID: KnowledgeBase::Answer::Translation::Content_body.d14dd6a3-2d6a-4322-aa23-cbb73463e1b4@zammad.example.org\nContent-Disposition: inline\nresizable: true\ncontent_preview: true\n",
        "size": "145451",
        "store_file_id": 25223,
        "store_object_id": 4,
        "updated_at": "2023-01-13 10:08:24.255000"
    },
```
    -> id: 26880
    -> https://<your-zammad-baseurl>/api/v1/attachments/26880
"""

import json
import re
import requests
import mimetypes
import logging
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List

from .config import Config
from .db import convert_cid_to_img_id

logger = logging.getLogger(__name__)


@dataclass
class ImagesResult:
    fixed_images: int = 0


images_result = ImagesResult()


def download_img(img_api_id: str, zammad_fqdn: str, img_dir: Path) -> None:
    """Download an image from a URL and save it to a file."""
    img_filename = False

    img_dir.mkdir(exist_ok=True)
    img_path = img_dir / img_api_id
    img_url = f"https://{zammad_fqdn}/api/v1/attachments/{img_api_id}"

    # existing_files = list(img_dir.glob(f"{img_api_id}.*"))
    # if existing_files:
    #     logger.info(f"{existing_files[0]} already exists, skipping download.")
    #     return

    try:
        response = requests.get(img_url, timeout=30)
        response.raise_for_status()
        content_type = response.headers.get("content-type")
        extension = mimetypes.guess_extension(content_type) or ""
        img_file = img_path.with_suffix(extension)
        logger.info(f"Downloading image from {img_url} to {img_file.name}")
        img_file.write_bytes(response.content)
        img_filename = img_file.name
        images_result.fixed_images += 1
    except requests.RequestException as e:
        logger.warning(f"Failed to download {img_url}: {e}")

    return img_filename


def replace_img_links(
    content: str, db_path: Path, zammad_fqdn: str, img_dir: Path
) -> str:
    """Replace CID image links with actual URLs."""

    cid_pattern = rf'<img src="cid:KnowledgeBase::Answer::Translation::Content_body\.([^"]+)@{re.escape(zammad_fqdn)}"'

    def replace_match(match):
        img_cid = match.group(1)
        img_api_id = convert_cid_to_img_id(img_cid, db_path, zammad_fqdn)
        img_filename = download_img(img_api_id, zammad_fqdn, img_dir)
        if not img_filename:
            return match.group(0)
        return f'<img src="./images/{img_filename}"'

    return re.sub(cid_pattern, replace_match, content)


def process_json(
    data: List[Dict], db_path: Path, zammad_fqdn: str, img_dir: Path
) -> List[Dict]:
    """Process and modify JSON data."""
    for answer_id, answer_item in data.items():
        for translation_id, translation_item in answer_item["translations"].items():
            if "content" in translation_item:
                translation_item["content"] = replace_img_links(
                    translation_item["content"], db_path, zammad_fqdn, img_dir
                )
    return data


def fix_images(config: Config) -> Path:
    with config.json_path.open("r", encoding="utf-8") as f:
        data = json.load(f)

    modified_data = process_json(
        data, config.db_path, config.zammad_fqdn, config.img_dir
    )

    fixed_json = config.json_imgfixed_path
    with fixed_json.open("w", encoding="utf-8") as f:
        json.dump(modified_data, f, ensure_ascii=False, indent=2)

    return images_result
